package hw2;

public class StringLinkedBag implements Cloneable {
	private StringNode head;
	private int count;
	
	// LinkedList constructor
	public StringLinkedBag() {
		head = new StringNode(null);
		count = 0;
	}
	
	// Appends the specified element to the end of this list.
	public void add(Object data) {
		StringNode temp = new StringNode(data);
		StringNode current = head;
		
		// starting at the head node, crawl to the end of the list
		while(current.getNext() != null) {
			current = current.getNext();
		}
		
		// the last node's "next" reference set to our new node
		current.setNext(temp);
		// increment the element count
		count++;
	}
	
	// Get the element at the given position.
	public Object get(int index) {
		// index must be 1 or higher
		if(index <= 0)
			return null;
		
		StringNode current = head.getNext();
		for(int i = 1; i < index; i++)
		{
			if(current.getNext() == null)
				return null;
			
			current = current.getNext();
		}
		return current.getData();
	}
	
	// Remove the element at the given position.
	public boolean remove(String key) {
		StringNode current = head;
		StringNode prev = null;
		
		while (current.getNext() != null && current.getData() != key) {
			prev = current;
			current = current.getNext();
		}
		
		prev.setNext(current.getNext());
		
		// Decrease element count
		count--;
		
		return true;
	}
	
	public int countOccurrences(String key) {
		StringNode current = head;
		int occurences = 0;
		
		while (current.getNext() != null) {
			if (current.getData() == key) {
				occurences++;
			}
			current = current.getNext();
		}
		
		return occurences;
	}
	
	// Get the number of elements in list.
	public int size() {
		return count;
	}
}
